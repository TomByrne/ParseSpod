package ::classPack::;
import haar.ParseObjectHelper;
import promhx.Promise;
import parse.*;

/**
 * Generated by Haar Tool (v::haarVersion::)
 */
abstract ::className::(String)
{
	static var loadedObjects:Map<String, Bool> = new Map();
	
	::foreach fields::
	static var ::name::_local:Map<String, ::type::> = new Map();
	static var ::name::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	static var desc:EntityDesc = {loaded:loadedObjects,
		fields:[
	
	::foreach fields::
			{name:"::name::", local:::name::_local, remote:::name::_remote, type:::descType::, remoteType:::remoteType::}::if (!last)::,::end::::end::
    
	
		]};
	
	
	::foreach fields::
	public var ::name::(get, set):::type::;
	function get_::name::():::type:: {
		return ParseObjectHelper.get(this, ::name::_local, ::name::_remote);
	}
	function set_::name::(value:::type::):::type:: {
		return ParseObjectHelper.set(this, value, ::name::_local, ::name::_remote);
	}
	::end::
	
	public var loaded(get, never):Bool;
	function get_loaded():Bool {
		return ParseObjectHelper.getLoaded(this, loadedObjects);
	}
	
	public static function all() : Promise<Array<::className::>> {
		return ParseObjectHelper.all("::serverId::", "::className::", desc);
	}

	private function new(objectId:String) 
	{
		this = objectId;
	}
	
	
	public function save() : Promise<::className::>
	{
		return untyped ParseObjectHelper.save(this, "::serverId::", "::className::", desc);
	}
	public function load(overwriteChanges:Bool=false) : Promise<::className::>
	{
		return untyped ParseObjectHelper.load(this, overwriteChanges, "::serverId::", "::className::", desc);
	}
	public function delete() : Promise<::className::>
	{
		return untyped ParseObjectHelper.delete(this, "::serverId::", "::className::", desc);
	}
	
	public function toString() : String
	{
		return ParseObjectHelper.toString(this, desc);
	}
	
}