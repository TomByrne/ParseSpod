package ::classPack::;
import haar.ParseObjectHelper;
import promhx.Promise;

/**
 * Generated by Haar Tool (v::haarVersion::)
 */
abstract ::className::(String)
{
	::foreach fields::
	static var ::name::_local:Map<String, String> = new Map();
	static var ::name::_remote:Map<String, String> = new Map();
    ::end::
	
	static var desc:EntityDesc = {fields:[
	
	::foreach fields::
		{name:"::name::", local:::name::_local, remote:::name::_remote}::if (!last)::,::end::::end::
    
	
	]};
	
	
	::foreach fields::
	public var ::name::(get, set):String;
	function get_::name::():String {
		return ParseObjectHelper.get(this, ::name::_local, ::name::_remote);
	}
	function set_::name::(value:String):String {
		return ParseObjectHelper.set(this, value, ::name::_local, ::name::_remote);
	}
	::end::
	
	public static function all() : Promise<Array<::className::>> {
		return ParseObjectHelper.all("::serverId::", "::className::", desc);
	}

	private function new(objectId:String) 
	{
		this = objectId;
	}
	
	
	public function save() : Promise<::className::>
	{
		return untyped ParseObjectHelper.save(this, "::serverId::", "::className::", desc);
	}
	public function load(overwriteChanges:Bool=false) : Promise<::className::>
	{
		return untyped ParseObjectHelper.load(this, overwriteChanges, "::serverId::", "::className::", desc);
	}
	public function delete() : Promise<::className::>
	{
		return untyped ParseObjectHelper.delete(this, "::serverId::", "::className::");
	}
	
}