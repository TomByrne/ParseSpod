package ::classPack::;
import parseSpod.parse.*;
import parseSpod.parse.ParseObjectHelper;
import promhx.Promise;

/**
 * Generated by Parse Spod Tool (v::toolVersion::)
 */
@:access(parseSpod.parse.ParseFile)
abstract ::className::(String)
{
	static var loadedObjects:Map<String, Bool> = new Map();
	
	::foreach fields::
	static var ::name::_local:Map<String, ::type::> = new Map();
	static var ::name::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach pointers::
	static var ::name::_local:Map<String, ::type::> = new Map();
	static var ::name::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach files::
	static var ::name::_local:Map<String, ::type::> = new Map();
	static var ::name::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach relations::
	static var ::name::_local:Map<String, Array<::type::>> = new Map();
	static var ::name::_remote:Map<String, Array<::type::>> = new Map();
	static var ::name::_added:Map<String, Array<::type::>> = new Map();
	static var ::name::_removed:Map<String, Array<::type::>> = new Map();
	static var ::name::_loaded:Map<String, Bool> = new Map();
    ::end::
	
	static function getDesc() : EntityDesc
	{
		return desc;
	}
	
	static var desc:EntityDesc = {loaded:loadedObjects,
		fields:[
	
	::foreach fields::
			{name:"::name::", local:::name::_local, remote:::name::_remote, type:::descType::},::end::
	::foreach files::
			{name:"::name::", local:::name::_local, remote:::name::_remote, type:::descType::},::end::
	::foreach pointers::
			{name:"::name::", local:::name::_local, remote:::name::_remote, type:::descType::, remoteType:::remoteType::, entityDesc:ParseDescReg.get.bind("::classPack::.::type::")},::end::
	::foreach relations::
			{name:"::name::", local:::name::_local, remote:::name::_remote, added:::name::_added, removed:::name::_removed, type:::descType::, remoteType:::remoteType::, entityDesc:ParseDescReg.get.bind("::classPack::.::type::")},::end::
    
	
		]};
	
	inline public static function all() : Promise<Array<::className::>> {
		Server.setup();
		return ParseObjectHelper.query("::appName::", "::remoteClassName::", desc);
	}
	
	inline public static function query() : ParseQuery<::className::> {
		Server.setup();
		return new ParseQuery("::appName::", "::remoteClassName::", desc);
	}
	
	inline public static function create() : ::className:: {
		Server.setup();
		return new ::className::(ParseObjectId.getLocal());
	}
	
	
	public var objectId(get, never):String;
	inline function get_objectId():String {
		return this;
	}
	
	public var loaded(get, never):Bool;
	inline function get_loaded():Bool {
		return ParseObjectHelper.getLoaded(this, loadedObjects);
	}
	
	public var saved(get, never):Bool;
	inline function get_saved():Bool {
		return ParseObjectId.isLocal(objectId);
	}
	
	::foreach fields::
	public var ::name::(get, set):::type::;
	inline function get_::name::():::type:: {
		return ParseObjectHelper.get(objectId, ::name::_local, ::name::_remote);
	}
	inline function set_::name::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::name::_local, ::name::_remote);
	}
	::end::
	
	::foreach files::
	public var ::name::(get, set):::type::;
	inline function get_::name::():::type:: {
		return ParseObjectHelper.get(objectId, ::name::_local, ::name::_remote);
	}
	inline function set_::name::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::name::_local, ::name::_remote);
	}
	inline public function ::name::Upload(saveEntity:Bool=false):Promise<ParseFile> {
		return ::name::.uploadForEntity("::appName::", objectId, ::name::_local, saveEntity ? ParseObjectHelper.save.bind(objectId, this, "::appName::", "::remoteClassName::", desc, ["::name::"]) : null );
	}
	::end::
	
	::foreach pointers::
	public var ::name::(get, set):::type::;
	inline function get_::name::():::type:: {
		return ParseObjectHelper.get(objectId, ::name::_local, ::name::_remote);
	}
	inline function set_::name::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::name::_local, ::name::_remote);
	}
	::end::
	
	
	
	::foreach relations::
	public var ::name::(get, never):Array<::type::>;
	inline function get_::name::():Array<::type::> {
		return ParseRelationHelper.get(this, ::name::_local);
	}
	inline public function ::name::Load(overwriteChanges:Bool=false):Promise<Array<::type::>> {
		return ParseRelationHelper.load("::appName::", "::remoteClassName::", this, ::remoteType::, "::name::", ::name::_local, ::name::_added, ::name::_removed, ::name::_remote, ::name::_loaded, overwriteChanges, ParseDescReg.get("::classPack::.::type::"));
	}
	inline public function ::name::Save():Promise<Array<::type::>> {
		return ParseRelationHelper.save("::appName::", "::remoteClassName::", this, ::remoteType::, "::name::", ::name::_local, ::name::_added, ::name::_removed, ::name::_remote);
	}
	inline public function ::name::Add(tag:::type::):Void {
		ParseRelationHelper.add(this, ::name::_local, ::name::_added, ::name::_removed, tag);
	}
	inline public function ::name::Remove(tag:::type::):Void {
		ParseRelationHelper.remove(this, ::name::_local, ::name::_added, ::name::_removed, ::name::_loaded, tag);
	}
	inline public function ::name::Loaded():Bool {
		return ParseRelationHelper.loaded(this, ::name::_loaded);
	}
	::end::

	private function new(objectId:String) 
	{
		Server.setup();
		this = objectId;
	}
	
	
	inline public function save() : Promise<::className::>
	{
		return untyped ParseObjectHelper.save(objectId, this, "::appName::", "::remoteClassName::", desc);
	}
	inline public function load(overwriteChanges:Bool=false) : Promise<::className::>
	{
		return untyped ParseObjectHelper.load(objectId, this, overwriteChanges, "::appName::", "::remoteClassName::", desc);
	}
	inline public function delete() : Promise<::className::>
	{
		return untyped ParseObjectHelper.delete(objectId, this, "::appName::", "::remoteClassName::", desc);
	}
	
	inline public function toString() : String
	{
		return ParseObjectHelper.toString(objectId, desc);
	}
	
}