package ::classPack::;
import parseSpod.parse.*;
import parseSpod.parse.ParseObjectHelper;
import promhx.Deferred;
import promhx.Promise;

/**
 * Generated by Parse Spod Tool (v::toolVersion::)
 */
@:access(parseSpod.parse.ParseFile)
class ::className::
{
	static var loadedObjects:Map<String, Bool> = new Map();
	
	::foreach fields::
	static var ::safeName::_local:Map<String, ::type::> = new Map();
	static var ::safeName::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach pointers::
	static var ::safeName::_local:Map<String, ::type::> = new Map();
	static var ::safeName::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach files::
	static var ::safeName::_local:Map<String, ::type::> = new Map();
	static var ::safeName::_remote:Map<String, ::type::> = new Map();
    ::end::
	
	::foreach relations::
	static var ::safeName::_local:Map<String, Array<::type::>> = new Map();
	static var ::safeName::_remote:Map<String, Array<::type::>> = new Map();
	static var ::safeName::_added:Map<String, Array<::type::>> = new Map();
	static var ::safeName::_removed:Map<String, Array<::type::>> = new Map();
	static var ::safeName::_loaded:Map<String, Bool> = new Map();
    ::end::
	
	static function getDesc() : EntityDesc
	{
		return desc;
	}
	
	static var desc:EntityDesc = {
		remoteName:"::remoteClassName::",
		loaded:loadedObjects,
		coerceData:get,
		fields:[
	
	::foreach fields::
			{name:"::safeName::", remoteName:"::name::", local:::safeName::_local, remote:::safeName::_remote, type:::descType::},::end::
	::foreach files::
			{name:"::safeName::", remoteName:"::name::", local:::safeName::_local, remote:::safeName::_remote, type:::descType::},::end::
	::foreach pointers::
			{name:"::safeName::", remoteName:"::name::", local:::safeName::_local, remote:::safeName::_remote, type:::descType::, remoteType:::remoteType::, entityDesc:ParseDescReg.get.bind("::classPack::.::type::")},::end::
	::foreach relations::
			{name:"::safeName::", remoteName:"::name::", local:::safeName::_local, remote:::safeName::_remote, added:::safeName::_added, removed:::safeName::_removed, type:::descType::, remoteType:::remoteType::, entityDesc:ParseDescReg.get.bind("::classPack::.::type::")},::end::
    
	
		]};
	
	public static function all() : Promise<Array<::className::>> {
		Server.setup();
		return wrapQuery(ParseObjectHelper.query("::appName::", "::remoteClassName::", desc));
	}
	
	public static function query() : ParseQuery<::className::> {
		Server.setup();
		return new ParseQuery("::appName::", "::remoteClassName::", desc, wrapQuery);
	}
	
	public static function create() : ::className:: {
		Server.setup();
		return new ::className::(ParseObjectId.getLocal());
	}
	
	public static function get(id:String) : ::className:: {
		Server.setup();
		return new ::className::(id);
	}
	
	static private function wrapQuery(query:Promise<Array<String>>) : Promise<Array<::className::>>
	{
		var deferred:Deferred<Array<::className::>> = new Deferred();
		var promise:Promise<Array<::className::>> = new Promise(deferred);
		query.then(
			function(ids:Array<String>){
				var res:Array<::className::> = [];
				for (id in ids) res.push(new ::className::(id));
				deferred.resolve(res);
			}
		).catchError(
			function(err:String){
				deferred.throwError(err);
			}
		);
		
		return promise;
	}
	
	
	public var objectId(default, null):String;
	
	public var loaded(get, never):Bool;
	function get_loaded():Bool {
		return ParseObjectHelper.getLoaded(objectId, loadedObjects);
	}
	
	public var saved(get, never):Bool;
	function get_saved():Bool {
		return ParseObjectId.isLocal(objectId);
	}
	
	public var hasChanges(get, never):Bool;
	function get_hasChanges():Bool {
		return ParseObjectHelper.hasChanges(objectId, desc);
	}
	
	::foreach fields::
	public var ::safeName::(get, set):::type::;
	function get_::safeName::():::type:: {
		return ParseObjectHelper.get(objectId, ::safeName::_local, ::safeName::_remote);
	}
	function set_::safeName::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::safeName::_local, ::safeName::_remote);
	}
	::end::
	
	::foreach files::
	public var ::safeName::(get, set):::type::;
	function get_::safeName::():::type:: {
		return ParseObjectHelper.get(objectId, ::safeName::_local, ::safeName::_remote);
	}
	function set_::safeName::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::safeName::_local, ::safeName::_remote);
	}
	public function ::safeName::Upload(saveEntity:Bool=false):Promise<ParseFile> {
		return ::safeName::.uploadForEntity("::appName::", objectId, ::safeName::_local, saveEntity ? ParseObjectHelper.save.bind(objectId, objectId, "::appName::", "::remoteClassName::", desc, ["::safeName::"]) : null );
	}
	::end::
	
	::foreach pointers::
	public var ::safeName::(get, set):::type::;
	function get_::safeName::():::type:: {
		return ParseObjectHelper.get(objectId, ::safeName::_local, ::safeName::_remote);
	}
	function set_::safeName::(value:::type::):::type:: {
		return ParseObjectHelper.set(objectId, value, ::safeName::_local, ::safeName::_remote);
	}
	::end::
	
	
	
	::foreach relations::
	public var ::safeName::(get, never):Array<::type::>;
	function get_::safeName::():Array<::type::> {
		return ParseRelationHelper.get(objectId, ::safeName::_local);
	}
	public function ::safeName::Load(overwriteChanges:Bool=false):Promise<Array<::type::>> {
		return ParseRelationHelper.load("::appName::", "::remoteClassName::", objectId, ::remoteType::, "::safeName::", ::safeName::_local, ::safeName::_added, ::safeName::_removed, ::safeName::_remote, ::safeName::_loaded, overwriteChanges, ParseDescReg.get("::classPack::.::type::"));
	}
	public function ::safeName::Save():Promise<Array<::type::>> {
		return ParseRelationHelper.save("::appName::", "::remoteClassName::", objectId, ::remoteType::, "::safeName::", ::safeName::_local, ::safeName::_added, ::safeName::_removed, ::safeName::_remote);
	}
	public function ::safeName::Add(entity:::type::):Void {
		ParseRelationHelper.add(objectId, ::safeName::_local, ::safeName::_added, ::safeName::_removed, entity);
	}
	public function ::safeName::Remove(entity:::type::):Void {
		ParseRelationHelper.remove(objectId, ::safeName::_local, ::safeName::_added, ::safeName::_removed, ::safeName::_loaded, entity);
	}
	public function ::safeName::Loaded():Bool {
		return ParseRelationHelper.loaded(objectId, ::safeName::_loaded);
	}
	::end::

	private function new(objectId:String) 
	{
		Server.setup();
		this.objectId = objectId;
	}
	
	
	public function save() : Promise<::className::>
	{
		var deferred:Deferred<::className::> = new Deferred();
		var promise:Promise<::className::> = new Promise(deferred);
		ParseObjectHelper.save(objectId, objectId, "::appName::", "::remoteClassName::", desc)
		.then(
			function(id:String){
				this.objectId = id;
				deferred.resolve(this);
			}
		).catchError(deferred.throwError);
		return promise;
	}
	public function load(overwriteChanges:Bool=false) : Promise<::className::>
	{
		var deferred:Deferred<::className::> = new Deferred();
		var promise:Promise<::className::> = new Promise(deferred);
		ParseObjectHelper.load(objectId, objectId, overwriteChanges, "::appName::", "::remoteClassName::", desc)
		.then(
			function(id:String){
				this.objectId = id;
				deferred.resolve(this);
			}
		).catchError(deferred.throwError);
		return promise;
	}
	public function delete() : Promise<::className::>
	{
		var deferred:Deferred<::className::> = new Deferred();
		var promise:Promise<::className::> = new Promise(deferred);
		ParseObjectHelper.delete(objectId, objectId, "::appName::", "::remoteClassName::", desc)
		.then(
			function(id:String){
				this.objectId = ParseObjectId.getLocal();
				deferred.resolve(this);
			}
		).catchError(deferred.throwError);
		return promise;
	}
	public function revert() : Bool
	{
		return ParseObjectHelper.revert(objectId, desc);
	}
	
	public function toString() : String
	{
		return ParseObjectHelper.toString(objectId, desc);
	}
	
}