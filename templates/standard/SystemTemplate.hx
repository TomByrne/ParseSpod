package ::classPack::;
import parseSpod.parse.*;
import parseSpod.parse.ParseObjectHelper;
import parseSpod.parse.ParseServerHelper;
import promhx.Promise;

/**
 * Generated by Parse Spod Tool (v::toolVersion::)
 */
@:access(::classPack::)
@:access(parseSpod.parse.ParseFile)
class ::className::
{
	static var isSetup:Bool;

	public static function setup() 
	{
		if (isSetup) return;
		isSetup = true;
		
		ParseServers.add("::appName::", "::serverHost::", "::applicationId::", "::restKey::");
		ParseIO.setServer("::appName::", 1, 2);
		
		::foreach entities::
		ParseDescReg.set("::classPack::.::className::", ::className::.desc);::end::
	}


	public function new() 
	{
		
	}
	
	public static function setToken(token:String) : Void
	{
		ParseIO.setToken("::appName::", token);
	}
	
	public static function getSession(token:String, useToken:Bool=true) 
	{
		return ParseServerHelper.getSession("::appName::", token, useToken);
	}
	
	public static function signup(signupOptions:SignupOptions, useToken:Bool=true) : Promise<ParseSession>
	{
		return ParseServerHelper.signup("::appName::", signupOptions, useToken);
	}
	public static function signin(username:String, password:String, useToken:Bool=true) : Promise<ParseSession>
	{
		return ParseServerHelper.signin("::appName::", username, password, useToken);
	}
	public static function passwordReset(email:String) : Promise<Bool>
	{
		return ParseServerHelper.passwordReset("::appName::", email);
	}
	public static function signout() : Void
	{
		setToken(null);
	}
	
	public static function upload(file:ParseFile) : Promise<ParseFile>
	{
		return file.upload("::appName::");
	}
}